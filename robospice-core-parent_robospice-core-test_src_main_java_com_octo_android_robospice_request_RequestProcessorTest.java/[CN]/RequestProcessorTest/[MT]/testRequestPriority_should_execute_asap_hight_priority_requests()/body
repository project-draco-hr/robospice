{
  PausableThreadPoolExecutor executorService=PriorityThreadPoolExecutor.getPriorityExecutor(1);
  networkStateChecker=new MockNetworkStateChecker();
  mockRequestRunner=new RequestRunner(getContext(),mockCacheManager,executorService,mockRequestProgressManager,networkStateChecker);
  requestProcessorUnderTest=new RequestProcessor(mockCacheManager,mockRequestProgressManager,mockRequestRunner);
  CachedSpiceRequestStub<String> stubRequestHighPriority=createSuccessfulRequest(TEST_CLASS,TEST_CACHE_KEY2,TEST_DURATION,TEST_RETURNED_DATA2);
  stubRequestHighPriority.setPriority(SpiceRequest.PRIORITY_HIGH);
  RequestListenerStub<String> mockRequestListener=new RequestListenerStub<String>();
  Set<RequestListener<?>> requestListenerSet=new HashSet<RequestListener<?>>();
  requestListenerSet.add(mockRequestListener);
  EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS),EasyMock.anyObject(),EasyMock.eq(TEST_DURATION))).andReturn(null);
  EasyMock.expectLastCall().anyTimes();
  EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA),EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
  EasyMock.expectLastCall().anyTimes();
  EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA2),EasyMock.eq(TEST_CACHE_KEY2))).andReturn(TEST_RETURNED_DATA2);
  EasyMock.expectLastCall().anyTimes();
  EasyMock.replay(mockCacheManager);
  executorService.pause();
  final int lowRequestCount=10;
  for (int i=0; i < lowRequestCount; i++) {
    CachedSpiceRequestStub<String> stubRequestLowPriority=createSuccessfulRequest(TEST_CLASS,TEST_RETURNED_DATA);
    stubRequestLowPriority.setPriority(SpiceRequest.PRIORITY_LOW);
    requestProcessorUnderTest.addRequest(stubRequestLowPriority,requestListenerSet);
  }
  requestProcessorUnderTest.addRequest(stubRequestHighPriority,requestListenerSet);
  executorService.resume();
  for (int i=0; i < lowRequestCount; i++) {
    mockRequestListener.await(REQUEST_COMPLETION_TIME_OUT);
    mockRequestListener.resetSuccess();
  }
  mockRequestListener.await(REQUEST_COMPLETION_TIME_OUT);
  EasyMock.verify(mockCacheManager);
  assertTrue(stubRequestHighPriority.isLoadDataFromNetworkCalled());
  assertTrue(mockRequestListener.isExecutedInUIThread());
  assertEquals(lowRequestCount + 1,mockRequestListener.getResultHistory().size());
  assertNotSame(TEST_RETURNED_DATA2,mockRequestListener.getResultHistory().get(lowRequestCount));
}
