{
  final ArrayList<RequestListenerWithProgressStub> listeners=new ArrayList<RequestListenerWithProgressStub>();
  final ArrayList<Thread> threads=new ArrayList<Thread>();
  final int threadCount=100;
  for (int i=0; i < threadCount; i++) {
    EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS),EasyMock.eq(TEST_CACHE_KEY),EasyMock.eq(TEST_DURATION))).andReturn(TEST_RETURNED_DATA);
  }
  EasyMock.replay(mockCacheManager);
  for (int i=0; i < threadCount; i++) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        CachedSpiceRequestStub<String> stubRequest=createSuccessfulRequest(TEST_CLASS,TEST_CACHE_KEY,TEST_DURATION,TEST_RETURNED_DATA);
        RequestListenerWithProgressStub<String> mockRequestListener=new RequestListenerWithProgressStub<String>();
synchronized (listeners) {
          listeners.add(mockRequestListener);
        }
        Set<RequestListener<?>> requestListenerSet=new HashSet<RequestListener<?>>();
        requestListenerSet.add(mockRequestListener);
        requestProcessorUnderTest.addRequest(stubRequest,requestListenerSet);
      }
    }
);
    thread.start();
    threads.add(thread);
  }
  for (  Thread thread : threads) {
    thread.join(REQUEST_COMPLETION_TIME_OUT);
  }
  Thread.sleep(REQUEST_COMPLETION_TIME_OUT);
  int listenersCalled=0;
  for (  RequestListenerWithProgressStub listener : listeners) {
    if (listener.isSuccessful() != null) {
      listenersCalled++;
    }
  }
  assertEquals(threadCount,listeners.size());
  assertEquals(threadCount,listenersCalled);
}
