{
  final long startTime=System.currentTimeMillis();
  Ln.d("Processing request : " + request);
  T result=null;
  final RequestProgressListener requestProgressListener=new RequestProgressListener(){
    @Override public void onRequestProgressUpdate(    final RequestProgress progress){
      final Set<RequestListener<?>> listeners=mapRequestToRequestListener.get(request);
      notifyListenersOfRequestProgress(request,listeners,progress);
    }
  }
;
  request.setRequestProgressListener(requestProgressListener);
  if (request.getRequestCacheKey() != null && request.getCacheDuration() != DurationInMillis.ALWAYS_EXPIRED) {
    try {
      Ln.d("Loading request from cache : " + request);
      request.setStatus(RequestStatus.READING_FROM_CACHE);
      result=loadDataFromCache(request.getResultType(),request.getRequestCacheKey(),request.getCacheDuration());
      if (result != null) {
        Ln.d("Request loaded from cache : " + request + " result="+ result);
        notifyListenersOfRequestSuccess(request,result);
        printRequestProcessingDuration(startTime,request);
        return;
      }
 else       if (request.isAcceptingDirtyCache()) {
        result=loadDataFromCache(request.getResultType(),request.getRequestCacheKey(),DurationInMillis.ALWAYS_RETURNED);
        if (result != null) {
          notifyListenersOfRequestSuccessButDontCompleteRequest(request,result);
        }
      }
    }
 catch (    final SpiceException e) {
      Ln.d(e,"Cache file could not be read.");
      if (failOnCacheError) {
        handleRetry(request,e);
        printRequestProcessingDuration(startTime,request);
        return;
      }
      cacheManager.removeDataFromCache(request.getResultType(),request.getRequestCacheKey());
      Ln.d(e,"Cache file deleted.");
    }
  }
  Ln.d("Cache content not available or expired or disabled");
  if (!isNetworkAvailable(applicationContext) && !request.isOffline()) {
    Ln.e("Network is down.");
    handleRetry(request,new NoNetworkException());
    printRequestProcessingDuration(startTime,request);
    return;
  }
  try {
    if (request.isCancelled()) {
      printRequestProcessingDuration(startTime,request);
      return;
    }
    Ln.d("Calling netwok request.");
    request.setStatus(RequestStatus.LOADING_FROM_NETWORK);
    result=request.loadDataFromNetwork();
    Ln.d("Network request call ended.");
  }
 catch (  final Exception e) {
    if (!request.isCancelled()) {
      Ln.e(e,"An exception occurred during request network execution :" + e.getMessage());
      handleRetry(request,new NetworkException("Exception occurred during invocation of web service.",e));
    }
 else {
      Ln.e("An exception occurred during request network execution but request was cancelled, so listeners are not called.");
    }
    printRequestProcessingDuration(startTime,request);
    return;
  }
  if (result != null && request.getRequestCacheKey() != null) {
    try {
      if (request.isCancelled()) {
        printRequestProcessingDuration(startTime,request);
        return;
      }
      Ln.d("Start caching content...");
      request.setStatus(RequestStatus.WRITING_TO_CACHE);
      result=saveDataToCacheAndReturnData(result,request.getRequestCacheKey());
      if (request.isCancelled()) {
        printRequestProcessingDuration(startTime,request);
        return;
      }
      notifyListenersOfRequestSuccess(request,result);
      printRequestProcessingDuration(startTime,request);
      return;
    }
 catch (    final SpiceException e) {
      Ln.d("An exception occurred during service execution :" + e.getMessage());
      if (failOnCacheError) {
        handleRetry(request,e);
        printRequestProcessingDuration(startTime,request);
        return;
      }
 else {
        if (request.isCancelled()) {
          printRequestProcessingDuration(startTime,request);
          return;
        }
        notifyListenersOfRequestSuccess(request,result);
      }
      cacheManager.removeDataFromCache(request.getResultType(),request.getRequestCacheKey());
      Ln.d(e,"Cache file deleted.");
    }
  }
 else {
    notifyListenersOfRequestSuccess(request,result);
    printRequestProcessingDuration(startTime,request);
    return;
  }
}
