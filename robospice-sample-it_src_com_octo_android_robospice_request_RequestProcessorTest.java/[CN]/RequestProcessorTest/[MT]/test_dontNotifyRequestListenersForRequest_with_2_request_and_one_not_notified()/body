{
  CachedContentRequestStub<String> stubRequest=createSuccessfulRequest(TEST_CLASS,TEST_CACHE_KEY,TEST_DURATION,TEST_RETURNED_DATA,WAIT_BEFORE_REQUEST_EXECUTION);
  CachedContentRequestStub<String> stubRequest2=createSuccessfulRequest(TEST_CLASS,TEST_CACHE_KEY,TEST_DURATION,TEST_RETURNED_DATA);
  RequestListenerStub<String> requestListenerStub=new RequestListenerStub<String>();
  RequestListenerStub<String> requestListenerStub2=new RequestListenerStub<String>();
  Set<RequestListener<?>> requestListenerSet=new HashSet<RequestListener<?>>();
  requestListenerSet.add(requestListenerStub);
  Set<RequestListener<?>> requestListenerSet2=new HashSet<RequestListener<?>>();
  requestListenerSet2.add(requestListenerStub2);
  EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS),EasyMock.eq(TEST_CACHE_KEY),EasyMock.eq(TEST_DURATION))).andReturn(null).times(2);
  EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA),EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA).times(2);
  EasyMock.replay(mockCacheManager);
  requestProcessorUnderTest.addRequest(stubRequest,requestListenerSet);
  requestProcessorUnderTest.dontNotifyRequestListenersForRequest(stubRequest.getContentRequest(),requestListenerSet);
  requestProcessorUnderTest.addRequest(stubRequest2,requestListenerSet2);
  stubRequest.await(WAIT_BEFORE_REQUEST_EXECUTION + REQUEST_COMPLETION_TIME_OUT);
  requestListenerStub2.await(REQUEST_COMPLETION_TIME_OUT);
  EasyMock.verify(mockCacheManager);
  assertTrue(stubRequest.isLoadDataFromNetworkCalled());
  assertTrue(stubRequest2.isLoadDataFromNetworkCalled());
  assertNull(requestListenerStub.isSuccessful());
  assertTrue(requestListenerStub2.isSuccessful());
}
