{
  RestTemplate restTemplate=new RestTemplate(){
    @Override protected ClientHttpRequest createRequest(    URI url,    HttpMethod method) throws IOException {
      ClientHttpRequest request=super.createRequest(url,method);
      HttpHeaders headers=request.getHeaders();
      headers.setAcceptEncoding(ContentCodingType.GZIP);
      return request;
    }
  }
;
  System.setProperty("http.keepAlive","false");
  ClientHttpRequestFactory factory=restTemplate.getRequestFactory();
  if (factory instanceof HttpComponentsClientHttpRequestFactory) {
    HttpComponentsClientHttpRequestFactory advancedFactory=(HttpComponentsClientHttpRequestFactory)factory;
    advancedFactory.setConnectTimeout(WEBSERVICES_TIMEOUT);
    advancedFactory.setReadTimeout(WEBSERVICES_TIMEOUT);
  }
 else   if (factory instanceof SimpleClientHttpRequestFactory) {
    SimpleClientHttpRequestFactory advancedFactory=(SimpleClientHttpRequestFactory)factory;
    advancedFactory.setConnectTimeout(WEBSERVICES_TIMEOUT);
    advancedFactory.setReadTimeout(WEBSERVICES_TIMEOUT);
  }
  MappingJacksonHttpMessageConverter jsonConverter=new MappingJacksonHttpMessageConverter();
  FormHttpMessageConverter formHttpMessageConverter=new FormHttpMessageConverter();
  StringHttpMessageConverter stringHttpMessageConverter=new StringHttpMessageConverter();
  final List<HttpMessageConverter<?>> listHttpMessageConverters=restTemplate.getMessageConverters();
  listHttpMessageConverters.add(jsonConverter);
  listHttpMessageConverters.add(formHttpMessageConverter);
  listHttpMessageConverters.add(stringHttpMessageConverter);
  restTemplate.setMessageConverters(listHttpMessageConverters);
  return restTemplate;
}
