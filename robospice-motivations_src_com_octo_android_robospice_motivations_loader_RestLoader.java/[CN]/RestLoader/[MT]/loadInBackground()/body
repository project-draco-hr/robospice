{
  if (delay != 0) {
    Log.d("request","delaying loading from network");
    try {
      Thread.sleep(delay);
    }
 catch (    InterruptedException e) {
      Log.e("request","Exception while delaying request",e);
    }
  }
  try {
    if (mAction == null) {
      Log.e(TAG,"You did not define an action. REST call canceled.");
      return new RESTResponse();
    }
    HttpRequestBase request=null;
switch (mVerb) {
case GET:
{
        request=new HttpGet();
        attachUriWithQuery(request,mAction,mParams);
      }
    break;
case DELETE:
{
    request=new HttpDelete();
    attachUriWithQuery(request,mAction,mParams);
  }
break;
case POST:
{
request=new HttpPost();
request.setURI(new URI(mAction.toString()));
HttpPost postRequest=(HttpPost)request;
if (mParams != null) {
  UrlEncodedFormEntity formEntity=new UrlEncodedFormEntity(paramsToList(mParams));
  postRequest.setEntity(formEntity);
}
}
break;
case PUT:
{
request=new HttpPut();
request.setURI(new URI(mAction.toString()));
HttpPut putRequest=(HttpPut)request;
if (mParams != null) {
UrlEncodedFormEntity formEntity=new UrlEncodedFormEntity(paramsToList(mParams));
putRequest.setEntity(formEntity);
}
}
break;
}
if (request != null) {
HttpClient client=new DefaultHttpClient();
Log.d(TAG,"Executing request: " + verbToString(mVerb) + ": "+ mAction.toString());
HttpResponse response=client.execute(request);
HttpEntity responseEntity=response.getEntity();
StatusLine responseStatus=response.getStatusLine();
int statusCode=responseStatus != null ? responseStatus.getStatusCode() : 0;
RESTResponse restResponse=new RESTResponse(responseEntity != null ? EntityUtils.toString(responseEntity) : null,statusCode);
return restResponse;
}
return new RESTResponse();
}
 catch (URISyntaxException e) {
Log.e(TAG,"URI syntax was incorrect. " + verbToString(mVerb) + ": "+ mAction.toString(),e);
return new RESTResponse();
}
catch (UnsupportedEncodingException e) {
Log.e(TAG,"A UrlEncodedFormEntity was created with an unsupported encoding.",e);
return new RESTResponse();
}
catch (ClientProtocolException e) {
Log.e(TAG,"There was a problem when sending the request.",e);
return new RESTResponse();
}
catch (IOException e) {
Log.e(TAG,"There was a problem when sending the request.",e);
return new RESTResponse();
}
}
